{"ast":null,"code":"var _jsxFileName = \"/Users/matthewlones/Documents/flask-react-app/frontend-final/src/components/ReplayMode.jsx\",\n  _s = $RefreshSig$();\n/* components/ReplayMode.jsx\nimport React, { useState, useEffect } from 'react';\n\nconst REPLAY_OPTIONS = [\n  { id: 0, name: 'Harvest the Plant' },\n  { id: 1, name: 'Draw a Circle' },\n  { id: 2, name: 'Wave Hello' },\n];\n\nexport default function ReplayMode() {\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const startReplay = () => {\n    if (selectedId === null) return;\n\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ index: selectedId })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          setStatus('Replay started!');\n        } else {\n          setStatus('❌ Failed to start replay.');\n          setIsRunning(false);\n        }\n      })\n      .catch(err => {\n        setStatus('❌ Error contacting server.');\n        setIsRunning(false);\n      });\n  };\n\n  // Live polling loop while replay is running\n  useEffect(() => {\n    if (!isRunning) return;\n\n    console.log(\"[React] Triggering replay index: 0 \"); // ✅ ADD THIS\n    const interval = setInterval(() => {\n      fetch('/api/replay-status')\n        .then(res => res.json())\n        .then(data => {\n          if (data.messages) {\n            setMessages(prev => [...prev, ...data.messages]);\n          }\n          if (data.done) {\n            setStatus('✅ Replay complete.');\n            setIsRunning(false);\n            clearInterval(interval);\n          }\n        })\n        .catch(err => {\n          setStatus('❌ Error polling status');\n          setIsRunning(false);\n          clearInterval(interval);\n        });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  return (\n    <div className=\"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\">\n      <h2 className=\"text-xl font-bold mb-2\">Replay Mode</h2>\n\n      <div className=\"space-y-2\">\n        {REPLAY_OPTIONS.map(option => (\n          <button\n            key={option.id}\n            onClick={() => setSelectedId(option.id)}\n            className={`block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`}\n            disabled={isRunning}\n          >\n            {option.name}\n          </button>\n        ))}\n      </div>\n\n      <button\n        onClick={startReplay}\n        disabled={selectedId === null || isRunning}\n        className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\"\n      >\n        {isRunning ? 'Running...' : 'Start Replay'}\n      </button>\n\n      <div className=\"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\">\n        <p className=\"font-bold text-blue-100 mb-2\">Replay Status:</p>\n        <ul className=\"space-y-1 text-blue-200\">\n          {messages.map((msg, i) => (\n            <li key={i}>{JSON.stringify(msg)}</li>\n          ))}\n        </ul>\n        <p className=\"mt-2 italic text-xs text-blue-300\">Status: {status}</p>\n      </div>\n    </div>\n  );\n}*/\n\n// components/ReplayMode.jsx\n// components/ReplayMode.jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REPLAY_OPTIONS = [{\n  id: 0,\n  name: 'Harvest the Plant'\n}, {\n  id: 1,\n  name: 'Draw a Circle'\n}, {\n  id: 2,\n  name: 'Wave Hello'\n}];\nexport default function ReplayMode() {\n  _s();\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const scrollRef = useRef(null);\n  const [latestCoord, setLatestCoord] = useState(null);\n  const startReplay = () => {\n    if (selectedId === null) return;\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n    setStartTime(Date.now());\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        index: selectedId\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        setStatus('Replay started!');\n      } else {\n        setStatus('❌ Failed to start replay.');\n        setIsRunning(false);\n      }\n    }).catch(err => {\n      setStatus('❌ Error contacting server.');\n      setIsRunning(false);\n    });\n  };\n  const clearLog = () => {\n    setMessages([]);\n  };\n  useEffect(() => {\n    if (!isRunning) return;\n    const interval = setInterval(() => {\n      fetch('/api/replay-status').then(res => res.json()).then(data => {\n        if (data.messages) {\n          setMessages(prev => {\n            const updated = [...prev, ...data.messages.map(msg => ({\n              ...msg,\n              timestamp: ((Date.now() - startTime) / 1000).toFixed(1) + 's'\n            }))];\n            const lastUpdate = data.messages.reverse().find(m => m.type === 'update');\n            if (lastUpdate && lastUpdate.data) {\n              setLatestCoord({\n                x: lastUpdate.data.x,\n                y: lastUpdate.data.y\n              });\n            }\n            return updated;\n          });\n        }\n        if (data.done) {\n          setStatus('✅ Replay complete.');\n          setIsRunning(false);\n          clearInterval(interval);\n        }\n      }).catch(err => {\n        setStatus('❌ Error polling status');\n        setIsRunning(false);\n        clearInterval(interval);\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [isRunning, startTime]);\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-2\",\n      children: \"Replay Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-2\",\n      children: REPLAY_OPTIONS.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedId(option.id),\n        className: `block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`,\n        disabled: isRunning,\n        children: option.name\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startReplay,\n      disabled: selectedId === null || isRunning,\n      className: \"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\",\n      children: isRunning ? 'Running...' : 'Start Replay'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearLog,\n      className: \"w-full bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 mt-2 rounded\",\n      disabled: messages.length === 0,\n      children: \"Clear Log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\",\n      ref: scrollRef,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold text-blue-100 mb-2\",\n        children: \"Replay Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"space-y-1 text-blue-200\",\n        children: messages.map((msg, i) => {\n          if (msg.type === 'update' && msg.data) {\n            const {\n              x,\n              y,\n              z\n            } = msg.data;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u27A4 \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-green-300\",\n                children: [\"x: \", x, \", y: \", y, \", z: \", z]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 245,\n                columnNumber: 40\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 17\n            }, this);\n          }\n          if (msg.type === 'bounds') {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"text-yellow-300\",\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u26A0\\uFE0F Out of bounds!\"]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this);\n          }\n          if (msg.type === 'done') {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"text-green-400 font-semibold\",\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u2705 Replay Complete\"]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 17\n            }, this);\n          }\n          if (msg.type === 'error') {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"text-red-400\",\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u274C Error: \", msg.message]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"text-gray-400 italic\",\n            children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \", JSON.stringify(msg)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 italic text-xs text-blue-300\",\n        children: [\"Status: \", status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 bg-blue-950 p-4 rounded shadow-md relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold text-sm text-white mb-2\",\n        children: \"Live Position Grid (x vs y in cm)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative w-full h-64 border border-blue-300 bg-blue-900/40 overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0\",\n          children: [Array.from({\n            length: 50\n          }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute w-full border-t border-white/10\",\n            style: {\n              top: `${i * 2}px`\n            }\n          }, `h-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 15\n          }, this)), Array.from({\n            length: 50\n          }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute h-full border-l border-white/10\",\n            style: {\n              left: `${i * 2}px`\n            }\n          }, `v-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 292,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), latestCoord && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute w-3 h-3 rounded-full bg-green-500 shadow\",\n          style: {\n            left: `calc(50% + ${latestCoord.x * 10}px)`,\n            top: `calc(50% - ${latestCoord.y * 10}px)`,\n            transform: 'translate(-50%, -50%)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n}\n_s(ReplayMode, \"fx0bA0WJQwJs1sizjTPQkELqm1g=\");\n_c = ReplayMode;\nvar _c;\n$RefreshReg$(_c, \"ReplayMode\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","REPLAY_OPTIONS","id","name","ReplayMode","_s","selectedId","setSelectedId","status","setStatus","messages","setMessages","isRunning","setIsRunning","startTime","setStartTime","scrollRef","latestCoord","setLatestCoord","startReplay","Date","now","fetch","method","headers","body","JSON","stringify","index","then","res","json","data","success","catch","err","clearLog","interval","setInterval","prev","updated","map","msg","timestamp","toFixed","lastUpdate","reverse","find","m","type","x","y","done","clearInterval","current","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","option","onClick","disabled","length","ref","i","z","message","Array","from","_","style","top","left","transform","_c","$RefreshReg$"],"sources":["/Users/matthewlones/Documents/flask-react-app/frontend-final/src/components/ReplayMode.jsx"],"sourcesContent":["/* components/ReplayMode.jsx\nimport React, { useState, useEffect } from 'react';\n\nconst REPLAY_OPTIONS = [\n  { id: 0, name: 'Harvest the Plant' },\n  { id: 1, name: 'Draw a Circle' },\n  { id: 2, name: 'Wave Hello' },\n];\n\nexport default function ReplayMode() {\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const startReplay = () => {\n    if (selectedId === null) return;\n\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ index: selectedId })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          setStatus('Replay started!');\n        } else {\n          setStatus('❌ Failed to start replay.');\n          setIsRunning(false);\n        }\n      })\n      .catch(err => {\n        setStatus('❌ Error contacting server.');\n        setIsRunning(false);\n      });\n  };\n\n  // Live polling loop while replay is running\n  useEffect(() => {\n    if (!isRunning) return;\n\n    console.log(\"[React] Triggering replay index: 0 \"); // ✅ ADD THIS\n    const interval = setInterval(() => {\n      fetch('/api/replay-status')\n        .then(res => res.json())\n        .then(data => {\n          if (data.messages) {\n            setMessages(prev => [...prev, ...data.messages]);\n          }\n          if (data.done) {\n            setStatus('✅ Replay complete.');\n            setIsRunning(false);\n            clearInterval(interval);\n          }\n        })\n        .catch(err => {\n          setStatus('❌ Error polling status');\n          setIsRunning(false);\n          clearInterval(interval);\n        });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  return (\n    <div className=\"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\">\n      <h2 className=\"text-xl font-bold mb-2\">Replay Mode</h2>\n\n      <div className=\"space-y-2\">\n        {REPLAY_OPTIONS.map(option => (\n          <button\n            key={option.id}\n            onClick={() => setSelectedId(option.id)}\n            className={`block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`}\n            disabled={isRunning}\n          >\n            {option.name}\n          </button>\n        ))}\n      </div>\n\n      <button\n        onClick={startReplay}\n        disabled={selectedId === null || isRunning}\n        className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\"\n      >\n        {isRunning ? 'Running...' : 'Start Replay'}\n      </button>\n\n      <div className=\"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\">\n        <p className=\"font-bold text-blue-100 mb-2\">Replay Status:</p>\n        <ul className=\"space-y-1 text-blue-200\">\n          {messages.map((msg, i) => (\n            <li key={i}>{JSON.stringify(msg)}</li>\n          ))}\n        </ul>\n        <p className=\"mt-2 italic text-xs text-blue-300\">Status: {status}</p>\n      </div>\n    </div>\n  );\n}*/\n\n// components/ReplayMode.jsx\n// components/ReplayMode.jsx\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst REPLAY_OPTIONS = [\n  { id: 0, name: 'Harvest the Plant' },\n  { id: 1, name: 'Draw a Circle' },\n  { id: 2, name: 'Wave Hello' },\n];\n\nexport default function ReplayMode() {\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const [startTime, setStartTime] = useState(null);\n  const scrollRef = useRef(null);\n  const [latestCoord, setLatestCoord] = useState(null);\n\n  const startReplay = () => {\n    if (selectedId === null) return;\n\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n    setStartTime(Date.now());\n\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ index: selectedId })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          setStatus('Replay started!');\n        } else {\n          setStatus('❌ Failed to start replay.');\n          setIsRunning(false);\n        }\n      })\n      .catch(err => {\n        setStatus('❌ Error contacting server.');\n        setIsRunning(false);\n      });\n  };\n\n  const clearLog = () => {\n    setMessages([]);\n  };\n\n  useEffect(() => {\n    if (!isRunning) return;\n\n    const interval = setInterval(() => {\n      fetch('/api/replay-status')\n        .then(res => res.json())\n        .then(data => {\n          if (data.messages) {\n            setMessages(prev => {\n              const updated = [...prev, ...data.messages.map(msg => ({\n                ...msg,\n                timestamp: ((Date.now() - startTime) / 1000).toFixed(1) + 's'\n              }))];\n              const lastUpdate = data.messages.reverse().find(m => m.type === 'update');\n              if (lastUpdate && lastUpdate.data) {\n                setLatestCoord({ x: lastUpdate.data.x, y: lastUpdate.data.y });\n              }\n              return updated;\n            });\n          }\n          if (data.done) {\n            setStatus('✅ Replay complete.');\n            setIsRunning(false);\n            clearInterval(interval);\n          }\n        })\n        .catch(err => {\n          setStatus('❌ Error polling status');\n          setIsRunning(false);\n          clearInterval(interval);\n        });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isRunning, startTime]);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\">\n      <h2 className=\"text-xl font-bold mb-2\">Replay Mode</h2>\n\n      <div className=\"space-y-2\">\n        {REPLAY_OPTIONS.map(option => (\n          <button\n            key={option.id}\n            onClick={() => setSelectedId(option.id)}\n            className={`block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`}\n            disabled={isRunning}\n          >\n            {option.name}\n          </button>\n        ))}\n      </div>\n\n      <button\n        onClick={startReplay}\n        disabled={selectedId === null || isRunning}\n        className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\"\n      >\n        {isRunning ? 'Running...' : 'Start Replay'}\n      </button>\n\n      <button\n        onClick={clearLog}\n        className=\"w-full bg-red-500 hover:bg-red-600 text-white text-xs py-1 px-2 mt-2 rounded\"\n        disabled={messages.length === 0}\n      >\n        Clear Log\n      </button>\n\n      <div className=\"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\" ref={scrollRef}>\n        <p className=\"font-bold text-blue-100 mb-2\">Replay Status:</p>\n        <ul className=\"space-y-1 text-blue-200\">\n          {messages.map((msg, i) => {\n            if (msg.type === 'update' && msg.data) {\n              const { x, y, z } = msg.data;\n              return (\n                <li key={i}>\n                  🕒 {msg.timestamp} ➤ <span className=\"text-green-300\">x: {x}, y: {y}, z: {z}</span>\n                </li>\n              );\n            }\n            if (msg.type === 'bounds') {\n              return (\n                <li key={i} className=\"text-yellow-300\">\n                  🕒 {msg.timestamp} ⚠️ Out of bounds!\n                </li>\n              );\n            }\n            if (msg.type === 'done') {\n              return (\n                <li key={i} className=\"text-green-400 font-semibold\">\n                  🕒 {msg.timestamp} ✅ Replay Complete\n                </li>\n              );\n            }\n            if (msg.type === 'error') {\n              return (\n                <li key={i} className=\"text-red-400\">\n                  🕒 {msg.timestamp} ❌ Error: {msg.message}\n                </li>\n              );\n            }\n            return (\n              <li key={i} className=\"text-gray-400 italic\">\n                🕒 {msg.timestamp} {JSON.stringify(msg)}\n              </li>\n            );\n          })}\n        </ul>\n        <p className=\"mt-2 italic text-xs text-blue-300\">Status: {status}</p>\n      </div>\n\n      <div className=\"mt-4 bg-blue-950 p-4 rounded shadow-md relative\">\n        <p className=\"font-semibold text-sm text-white mb-2\">Live Position Grid (x vs y in cm)</p>\n        <div className=\"relative w-full h-64 border border-blue-300 bg-blue-900/40 overflow-hidden\">\n          <div className=\"absolute inset-0\">\n            {Array.from({ length: 50 }, (_, i) => (\n              <div\n                key={`h-${i}`}\n                className=\"absolute w-full border-t border-white/10\"\n                style={{ top: `${(i * 2)}px` }}\n              />\n            ))}\n            {Array.from({ length: 50 }, (_, i) => (\n              <div\n                key={`v-${i}`}\n                className=\"absolute h-full border-l border-white/10\"\n                style={{ left: `${(i * 2)}px` }}\n              />\n            ))}\n          </div>\n          {latestCoord && (\n            <div\n              className=\"absolute w-3 h-3 rounded-full bg-green-500 shadow\"\n              style={{\n                left: `calc(50% + ${latestCoord.x * 10}px)`,\n                top: `calc(50% - ${latestCoord.y * 10}px)`,\n                transform: 'translate(-50%, -50%)'\n              }}\n            ></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}