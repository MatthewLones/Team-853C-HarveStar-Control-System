{"ast":null,"code":"var _jsxFileName = \"/Users/matthewlones/Documents/flask-react-app/frontend-final/src/components/ReplayMode.jsx\",\n  _s = $RefreshSig$();\n/* components/ReplayMode.jsx\nimport React, { useState, useEffect } from 'react';\n\nconst REPLAY_OPTIONS = [\n  { id: 0, name: 'Harvest the Plant' },\n  { id: 1, name: 'Draw a Circle' },\n  { id: 2, name: 'Wave Hello' },\n];\n\nexport default function ReplayMode() {\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const startReplay = () => {\n    if (selectedId === null) return;\n\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ index: selectedId })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          setStatus('Replay started!');\n        } else {\n          setStatus('❌ Failed to start replay.');\n          setIsRunning(false);\n        }\n      })\n      .catch(err => {\n        setStatus('❌ Error contacting server.');\n        setIsRunning(false);\n      });\n  };\n\n  // Live polling loop while replay is running\n  useEffect(() => {\n    if (!isRunning) return;\n\n    console.log(\"[React] Triggering replay index: 0 \"); // ✅ ADD THIS\n    const interval = setInterval(() => {\n      fetch('/api/replay-status')\n        .then(res => res.json())\n        .then(data => {\n          if (data.messages) {\n            setMessages(prev => [...prev, ...data.messages]);\n          }\n          if (data.done) {\n            setStatus('✅ Replay complete.');\n            setIsRunning(false);\n            clearInterval(interval);\n          }\n        })\n        .catch(err => {\n          setStatus('❌ Error polling status');\n          setIsRunning(false);\n          clearInterval(interval);\n        });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  return (\n    <div className=\"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\">\n      <h2 className=\"text-xl font-bold mb-2\">Replay Mode</h2>\n\n      <div className=\"space-y-2\">\n        {REPLAY_OPTIONS.map(option => (\n          <button\n            key={option.id}\n            onClick={() => setSelectedId(option.id)}\n            className={`block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`}\n            disabled={isRunning}\n          >\n            {option.name}\n          </button>\n        ))}\n      </div>\n\n      <button\n        onClick={startReplay}\n        disabled={selectedId === null || isRunning}\n        className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\"\n      >\n        {isRunning ? 'Running...' : 'Start Replay'}\n      </button>\n\n      <div className=\"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\">\n        <p className=\"font-bold text-blue-100 mb-2\">Replay Status:</p>\n        <ul className=\"space-y-1 text-blue-200\">\n          {messages.map((msg, i) => (\n            <li key={i}>{JSON.stringify(msg)}</li>\n          ))}\n        </ul>\n        <p className=\"mt-2 italic text-xs text-blue-300\">Status: {status}</p>\n      </div>\n    </div>\n  );\n}*/\n\n// components/ReplayMode.jsx\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst REPLAY_OPTIONS = [{\n  id: 0,\n  name: 'Harvest the Plant'\n}, {\n  id: 1,\n  name: 'Draw a Circle'\n}, {\n  id: 2,\n  name: 'Wave Hello'\n}];\nexport default function ReplayMode() {\n  _s();\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const scrollRef = useRef(null);\n  const [latestCoord, setLatestCoord] = useState(null);\n  const startReplay = () => {\n    if (selectedId === null) return;\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        index: selectedId\n      })\n    }).then(res => res.json()).then(data => {\n      if (data.success) {\n        setStatus('Replay started!');\n      } else {\n        setStatus('❌ Failed to start replay.');\n        setIsRunning(false);\n      }\n    }).catch(err => {\n      setStatus('❌ Error contacting server.');\n      setIsRunning(false);\n    });\n  };\n\n  // Live polling loop while replay is running\n  useEffect(() => {\n    if (!isRunning) return;\n    const interval = setInterval(() => {\n      fetch('/api/replay-status').then(res => res.json()).then(data => {\n        if (data.messages) {\n          setMessages(prev => {\n            const updated = [...prev, ...data.messages.map(msg => ({\n              ...msg,\n              timestamp: new Date().toLocaleTimeString()\n            }))];\n            // Update dot position\n            const lastUpdate = data.messages.reverse().find(m => m.type === 'update');\n            if (lastUpdate && lastUpdate.data) {\n              setLatestCoord({\n                x: lastUpdate.data.x,\n                y: lastUpdate.data.y\n              });\n            }\n            return updated;\n          });\n        }\n        if (data.done) {\n          setStatus('✅ Replay complete.');\n          setIsRunning(false);\n          clearInterval(interval);\n        }\n      }).catch(err => {\n        setStatus('❌ Error polling status');\n        setIsRunning(false);\n        clearInterval(interval);\n      });\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [isRunning]);\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-2\",\n      children: \"Replay Mode\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-2\",\n      children: REPLAY_OPTIONS.map(option => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedId(option.id),\n        className: `block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`,\n        disabled: isRunning,\n        children: option.name\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startReplay,\n      disabled: selectedId === null || isRunning,\n      className: \"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\",\n      children: isRunning ? 'Running...' : 'Start Replay'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\",\n      ref: scrollRef,\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold text-blue-100 mb-2\",\n        children: \"Replay Status:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"space-y-1 text-blue-200\",\n        children: messages.map((msg, i) => {\n          if (msg.type === 'update' && msg.data) {\n            const {\n              x,\n              y,\n              z,\n              End_effector\n            } = msg.data;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u27A4 Moving to: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-green-300\",\n                children: [\"x=\", x, \", y=\", y, \", z=\", z, \", eff=\", End_effector]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 51\n              }, this)]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this);\n          }\n          if (msg.type === 'bounds') {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"text-yellow-300\",\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u26A0\\uFE0F Out of bounds!\"]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this);\n          }\n          if (msg.type === 'done') {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"text-green-400 font-semibold\",\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u2705 Replay Complete\"]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 17\n            }, this);\n          }\n          if (msg.type === 'error') {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"text-red-400\",\n              children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \\u274C Error: \", msg.message]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this);\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"text-gray-400 italic\",\n            children: [\"\\uD83D\\uDD52 \", msg.timestamp, \" \", JSON.stringify(msg)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-2 italic text-xs text-blue-300\",\n        children: [\"Status: \", status]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4 bg-white p-4 rounded shadow-md relative\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-semibold text-sm text-gray-800 mb-2\",\n        children: \"Live Position Grid (x vs y in cm)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative w-full h-64 border border-gray-300 bg-white overflow-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 flex flex-wrap\",\n          children: [Array.from({\n            length: 33\n          }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute left-1/2 w-full border-t border-gray-200\",\n            style: {\n              top: `${(i - 16) * 2}px`,\n              transform: 'translateY(-50%)'\n            }\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 15\n          }, this)), Array.from({\n            length: 33\n          }, (_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"absolute top-1/2 h-full border-l border-gray-200\",\n            style: {\n              left: `${(i - 16) * 2}px`,\n              transform: 'translateX(-50%)'\n            }\n          }, `v-${i}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), latestCoord && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute w-3 h-3 rounded-full bg-green-500 shadow\",\n          style: {\n            left: `calc(50% + ${latestCoord.x * 10}px)`,\n            top: `calc(50% - ${latestCoord.y * 10}px)`,\n            transform: 'translate(-50%, -50%)'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(ReplayMode, \"kiz9MQcv0htRFAcaNtvFZr9GA9o=\");\n_c = ReplayMode;\nvar _c;\n$RefreshReg$(_c, \"ReplayMode\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","REPLAY_OPTIONS","id","name","ReplayMode","_s","selectedId","setSelectedId","status","setStatus","messages","setMessages","isRunning","setIsRunning","scrollRef","latestCoord","setLatestCoord","startReplay","fetch","method","headers","body","JSON","stringify","index","then","res","json","data","success","catch","err","interval","setInterval","prev","updated","map","msg","timestamp","Date","toLocaleTimeString","lastUpdate","reverse","find","m","type","x","y","done","clearInterval","current","scrollTop","scrollHeight","className","children","fileName","_jsxFileName","lineNumber","columnNumber","option","onClick","disabled","ref","i","z","End_effector","message","Array","from","length","_","style","top","transform","left","_c","$RefreshReg$"],"sources":["/Users/matthewlones/Documents/flask-react-app/frontend-final/src/components/ReplayMode.jsx"],"sourcesContent":["/* components/ReplayMode.jsx\nimport React, { useState, useEffect } from 'react';\n\nconst REPLAY_OPTIONS = [\n  { id: 0, name: 'Harvest the Plant' },\n  { id: 1, name: 'Draw a Circle' },\n  { id: 2, name: 'Wave Hello' },\n];\n\nexport default function ReplayMode() {\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n\n  const startReplay = () => {\n    if (selectedId === null) return;\n\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ index: selectedId })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          setStatus('Replay started!');\n        } else {\n          setStatus('❌ Failed to start replay.');\n          setIsRunning(false);\n        }\n      })\n      .catch(err => {\n        setStatus('❌ Error contacting server.');\n        setIsRunning(false);\n      });\n  };\n\n  // Live polling loop while replay is running\n  useEffect(() => {\n    if (!isRunning) return;\n\n    console.log(\"[React] Triggering replay index: 0 \"); // ✅ ADD THIS\n    const interval = setInterval(() => {\n      fetch('/api/replay-status')\n        .then(res => res.json())\n        .then(data => {\n          if (data.messages) {\n            setMessages(prev => [...prev, ...data.messages]);\n          }\n          if (data.done) {\n            setStatus('✅ Replay complete.');\n            setIsRunning(false);\n            clearInterval(interval);\n          }\n        })\n        .catch(err => {\n          setStatus('❌ Error polling status');\n          setIsRunning(false);\n          clearInterval(interval);\n        });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  return (\n    <div className=\"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\">\n      <h2 className=\"text-xl font-bold mb-2\">Replay Mode</h2>\n\n      <div className=\"space-y-2\">\n        {REPLAY_OPTIONS.map(option => (\n          <button\n            key={option.id}\n            onClick={() => setSelectedId(option.id)}\n            className={`block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`}\n            disabled={isRunning}\n          >\n            {option.name}\n          </button>\n        ))}\n      </div>\n\n      <button\n        onClick={startReplay}\n        disabled={selectedId === null || isRunning}\n        className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\"\n      >\n        {isRunning ? 'Running...' : 'Start Replay'}\n      </button>\n\n      <div className=\"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\">\n        <p className=\"font-bold text-blue-100 mb-2\">Replay Status:</p>\n        <ul className=\"space-y-1 text-blue-200\">\n          {messages.map((msg, i) => (\n            <li key={i}>{JSON.stringify(msg)}</li>\n          ))}\n        </ul>\n        <p className=\"mt-2 italic text-xs text-blue-300\">Status: {status}</p>\n      </div>\n    </div>\n  );\n}*/\n\n// components/ReplayMode.jsx\nimport React, { useState, useEffect, useRef } from 'react';\n\nconst REPLAY_OPTIONS = [\n  { id: 0, name: 'Harvest the Plant' },\n  { id: 1, name: 'Draw a Circle' },\n  { id: 2, name: 'Wave Hello' },\n];\n\nexport default function ReplayMode() {\n  const [selectedId, setSelectedId] = useState(null);\n  const [status, setStatus] = useState('Idle');\n  const [messages, setMessages] = useState([]);\n  const [isRunning, setIsRunning] = useState(false);\n  const scrollRef = useRef(null);\n  const [latestCoord, setLatestCoord] = useState(null);\n\n  const startReplay = () => {\n    if (selectedId === null) return;\n\n    setStatus('Sending replay request...');\n    setMessages([]);\n    setIsRunning(true);\n\n    fetch('/api/start-replay', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ index: selectedId })\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          setStatus('Replay started!');\n        } else {\n          setStatus('❌ Failed to start replay.');\n          setIsRunning(false);\n        }\n      })\n      .catch(err => {\n        setStatus('❌ Error contacting server.');\n        setIsRunning(false);\n      });\n  };\n\n  // Live polling loop while replay is running\n  useEffect(() => {\n    if (!isRunning) return;\n\n    const interval = setInterval(() => {\n      fetch('/api/replay-status')\n        .then(res => res.json())\n        .then(data => {\n          if (data.messages) {\n            setMessages(prev => {\n              const updated = [...prev, ...data.messages.map(msg => ({ ...msg, timestamp: new Date().toLocaleTimeString() }))];\n              // Update dot position\n              const lastUpdate = data.messages.reverse().find(m => m.type === 'update');\n              if (lastUpdate && lastUpdate.data) {\n                setLatestCoord({ x: lastUpdate.data.x, y: lastUpdate.data.y });\n              }\n              return updated;\n            });\n          }\n          if (data.done) {\n            setStatus('✅ Replay complete.');\n            setIsRunning(false);\n            clearInterval(interval);\n          }\n        })\n        .catch(err => {\n          setStatus('❌ Error polling status');\n          setIsRunning(false);\n          clearInterval(interval);\n        });\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [isRunning]);\n\n  useEffect(() => {\n    if (scrollRef.current) {\n      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  return (\n    <div className=\"max-w-xl mx-auto bg-blue-900/40 border border-blue-300/20 shadow-lg rounded-xl p-6 space-y-6\">\n      <h2 className=\"text-xl font-bold mb-2\">Replay Mode</h2>\n\n      <div className=\"space-y-2\">\n        {REPLAY_OPTIONS.map(option => (\n          <button\n            key={option.id}\n            onClick={() => setSelectedId(option.id)}\n            className={`block w-full text-left px-4 py-2 rounded-lg transition shadow-sm border text-sm\n              ${selectedId === option.id ? 'bg-blue-600 text-white' : 'bg-blue-200/10 hover:bg-blue-300/10 border-blue-400/10'}`}\n            disabled={isRunning}\n          >\n            {option.name}\n          </button>\n        ))}\n      </div>\n\n      <button\n        onClick={startReplay}\n        disabled={selectedId === null || isRunning}\n        className=\"w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded disabled:opacity-50\"\n      >\n        {isRunning ? 'Running...' : 'Start Replay'}\n      </button>\n\n      <div className=\"mt-6 p-4 bg-black/40 rounded text-sm max-h-64 overflow-y-auto border border-blue-400/20\" ref={scrollRef}>\n        <p className=\"font-bold text-blue-100 mb-2\">Replay Status:</p>\n        <ul className=\"space-y-1 text-blue-200\">\n          {messages.map((msg, i) => {\n            if (msg.type === 'update' && msg.data) {\n              const { x, y, z, End_effector } = msg.data;\n              return (\n                <li key={i}>\n                  🕒 {msg.timestamp} ➤ Moving to: <span className=\"text-green-300\">x={x}, y={y}, z={z}, eff={End_effector}</span>\n                </li>\n              );\n            }\n            if (msg.type === 'bounds') {\n              return (\n                <li key={i} className=\"text-yellow-300\">\n                  🕒 {msg.timestamp} ⚠️ Out of bounds!\n                </li>\n              );\n            }\n            if (msg.type === 'done') {\n              return (\n                <li key={i} className=\"text-green-400 font-semibold\">\n                  🕒 {msg.timestamp} ✅ Replay Complete\n                </li>\n              );\n            }\n            if (msg.type === 'error') {\n              return (\n                <li key={i} className=\"text-red-400\">\n                  🕒 {msg.timestamp} ❌ Error: {msg.message}\n                </li>\n              );\n            }\n            return (\n              <li key={i} className=\"text-gray-400 italic\">\n                🕒 {msg.timestamp} {JSON.stringify(msg)}\n              </li>\n            );\n          })}\n        </ul>\n        <p className=\"mt-2 italic text-xs text-blue-300\">Status: {status}</p>\n      </div>\n\n      <div className=\"mt-4 bg-white p-4 rounded shadow-md relative\">\n        <p className=\"font-semibold text-sm text-gray-800 mb-2\">Live Position Grid (x vs y in cm)</p>\n        <div className=\"relative w-full h-64 border border-gray-300 bg-white overflow-hidden\">\n          <div className=\"absolute inset-0 flex flex-wrap\">\n            {Array.from({ length: 33 }, (_, i) => (\n              <div key={i} className=\"absolute left-1/2 w-full border-t border-gray-200\" style={{ top: `${(i - 16) * 2}px`, transform: 'translateY(-50%)' }} />\n            ))}\n            {Array.from({ length: 33 }, (_, i) => (\n              <div key={`v-${i}`} className=\"absolute top-1/2 h-full border-l border-gray-200\" style={{ left: `${(i - 16) * 2}px`, transform: 'translateX(-50%)' }} />\n            ))}\n          </div>\n          {latestCoord && (\n            <div\n              className=\"absolute w-3 h-3 rounded-full bg-green-500 shadow\"\n              style={{\n                left: `calc(50% + ${latestCoord.x * 10}px)`,\n                top: `calc(50% - ${latestCoord.y * 10}px)`,\n                transform: 'translate(-50%, -50%)'\n              }}\n            ></div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}